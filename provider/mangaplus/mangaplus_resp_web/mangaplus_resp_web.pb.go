// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: mangaplus_resp_web.proto

package mangaplus_resp_web

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Banner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageUrl string            `protobuf:"bytes,1,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Action   *TransitionAction `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Id       uint32            `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Banner) Reset() {
	*x = Banner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Banner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Banner) ProtoMessage() {}

func (x *Banner) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Banner.ProtoReflect.Descriptor instead.
func (*Banner) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{0}
}

func (x *Banner) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Banner) GetAction() *TransitionAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Banner) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type BannerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BannerTitle string    `protobuf:"bytes,1,opt,name=banner_title,json=bannerTitle,proto3" json:"banner_title,omitempty"`
	Banners     []*Banner `protobuf:"bytes,2,rep,name=banners,proto3" json:"banners,omitempty"`
}

func (x *BannerList) Reset() {
	*x = BannerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannerList) ProtoMessage() {}

func (x *BannerList) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannerList.ProtoReflect.Descriptor instead.
func (*BannerList) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{1}
}

func (x *BannerList) GetBannerTitle() string {
	if x != nil {
		return x.BannerTitle
	}
	return ""
}

func (x *BannerList) GetBanners() []*Banner {
	if x != nil {
		return x.Banners
	}
	return nil
}

type TransitionAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method int32  `protobuf:"varint,1,opt,name=method,proto3" json:"method,omitempty"`
	Url    string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *TransitionAction) Reset() {
	*x = TransitionAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransitionAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransitionAction) ProtoMessage() {}

func (x *TransitionAction) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransitionAction.ProtoReflect.Descriptor instead.
func (*TransitionAction) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{2}
}

func (x *TransitionAction) GetMethod() int32 {
	if x != nil {
		return x.Method
	}
	return 0
}

func (x *TransitionAction) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// LastPage
type Chapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleId        uint32 `protobuf:"varint,1,opt,name=title_id,json=titleId,proto3" json:"title_id,omitempty"`
	ChapterId      uint32 `protobuf:"varint,2,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	SubTitle       string `protobuf:"bytes,4,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`
	ThumbnailUrl   string `protobuf:"bytes,5,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	StartTimestamp uint32 `protobuf:"varint,6,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp   uint32 `protobuf:"varint,7,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	AlreadyViewed  bool   `protobuf:"varint,8,opt,name=already_viewed,json=alreadyViewed,proto3" json:"already_viewed,omitempty"`
	IsVerticalOnly bool   `protobuf:"varint,9,opt,name=is_vertical_only,json=isVerticalOnly,proto3" json:"is_vertical_only,omitempty"`
}

func (x *Chapter) Reset() {
	*x = Chapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chapter) ProtoMessage() {}

func (x *Chapter) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chapter.ProtoReflect.Descriptor instead.
func (*Chapter) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{3}
}

func (x *Chapter) GetTitleId() uint32 {
	if x != nil {
		return x.TitleId
	}
	return 0
}

func (x *Chapter) GetChapterId() uint32 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *Chapter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chapter) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *Chapter) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *Chapter) GetStartTimestamp() uint32 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *Chapter) GetEndTimestamp() uint32 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *Chapter) GetAlreadyViewed() bool {
	if x != nil {
		return x.AlreadyViewed
	}
	return false
}

func (x *Chapter) GetIsVerticalOnly() bool {
	if x != nil {
		return x.IsVerticalOnly
	}
	return false
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Index         uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	UserName      string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	IconUrl       string `protobuf:"bytes,4,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	IsMyComment   bool   `protobuf:"varint,6,opt,name=is_my_comment,json=isMyComment,proto3" json:"is_my_comment,omitempty"`
	AlreadyLiked  bool   `protobuf:"varint,7,opt,name=already_liked,json=alreadyLiked,proto3" json:"already_liked,omitempty"`
	NumberOfLikes uint32 `protobuf:"varint,9,opt,name=number_of_likes,json=numberOfLikes,proto3" json:"number_of_likes,omitempty"`
	Body          string `protobuf:"bytes,10,opt,name=body,proto3" json:"body,omitempty"`
	Created       uint32 `protobuf:"varint,11,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{4}
}

func (x *Comment) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Comment) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Comment) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Comment) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *Comment) GetIsMyComment() bool {
	if x != nil {
		return x.IsMyComment
	}
	return false
}

func (x *Comment) GetAlreadyLiked() bool {
	if x != nil {
		return x.AlreadyLiked
	}
	return false
}

func (x *Comment) GetNumberOfLikes() uint32 {
	if x != nil {
		return x.NumberOfLikes
	}
	return 0
}

func (x *Comment) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Comment) GetCreated() uint32 {
	if x != nil {
		return x.Created
	}
	return 0
}

type AdNetworkList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdNetworks *AdNetworkList_AdNetwork `protobuf:"bytes,1,opt,name=ad_networks,json=adNetworks,proto3" json:"ad_networks,omitempty"`
}

func (x *AdNetworkList) Reset() {
	*x = AdNetworkList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdNetworkList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdNetworkList) ProtoMessage() {}

func (x *AdNetworkList) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdNetworkList.ProtoReflect.Descriptor instead.
func (*AdNetworkList) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{5}
}

func (x *AdNetworkList) GetAdNetworks() *AdNetworkList_AdNetwork {
	if x != nil {
		return x.AdNetworks
	}
	return nil
}

type Popup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OsDefault   *Popup_OSDefault   `protobuf:"bytes,1,opt,name=os_default,json=osDefault,proto3" json:"os_default,omitempty"`
	AppDefault  *Popup_AppDefault  `protobuf:"bytes,2,opt,name=app_default,json=appDefault,proto3" json:"app_default,omitempty"`
	MovieReward *Popup_MovieReward `protobuf:"bytes,3,opt,name=movie_reward,json=movieReward,proto3" json:"movie_reward,omitempty"`
}

func (x *Popup) Reset() {
	*x = Popup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Popup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Popup) ProtoMessage() {}

func (x *Popup) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Popup.ProtoReflect.Descriptor instead.
func (*Popup) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{6}
}

func (x *Popup) GetOsDefault() *Popup_OSDefault {
	if x != nil {
		return x.OsDefault
	}
	return nil
}

func (x *Popup) GetAppDefault() *Popup_AppDefault {
	if x != nil {
		return x.AppDefault
	}
	return nil
}

func (x *Popup) GetMovieReward() *Popup_MovieReward {
	if x != nil {
		return x.MovieReward
	}
	return nil
}

type LastPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentChapter *Chapter       `protobuf:"bytes,1,opt,name=current_chapter,json=currentChapter,proto3" json:"current_chapter,omitempty"`
	NextChapter    *Chapter       `protobuf:"bytes,2,opt,name=next_chapter,json=nextChapter,proto3" json:"next_chapter,omitempty"`
	TopComments    []*Comment     `protobuf:"bytes,3,rep,name=top_comments,json=topComments,proto3" json:"top_comments,omitempty"`
	IsSubscribed   bool           `protobuf:"varint,4,opt,name=is_subscribed,json=isSubscribed,proto3" json:"is_subscribed,omitempty"`
	NextTimestamp  uint32         `protobuf:"varint,5,opt,name=next_timestamp,json=nextTimestamp,proto3" json:"next_timestamp,omitempty"`
	ChapterType    int32          `protobuf:"varint,6,opt,name=chapter_type,json=chapterType,proto3" json:"chapter_type,omitempty"`
	Advertisement  *AdNetworkList `protobuf:"bytes,7,opt,name=advertisement,proto3" json:"advertisement,omitempty"`
	MovieReward    *Popup         `protobuf:"bytes,8,opt,name=movie_reward,json=movieReward,proto3" json:"movie_reward,omitempty"`
}

func (x *LastPage) Reset() {
	*x = LastPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastPage) ProtoMessage() {}

func (x *LastPage) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastPage.ProtoReflect.Descriptor instead.
func (*LastPage) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{7}
}

func (x *LastPage) GetCurrentChapter() *Chapter {
	if x != nil {
		return x.CurrentChapter
	}
	return nil
}

func (x *LastPage) GetNextChapter() *Chapter {
	if x != nil {
		return x.NextChapter
	}
	return nil
}

func (x *LastPage) GetTopComments() []*Comment {
	if x != nil {
		return x.TopComments
	}
	return nil
}

func (x *LastPage) GetIsSubscribed() bool {
	if x != nil {
		return x.IsSubscribed
	}
	return false
}

func (x *LastPage) GetNextTimestamp() uint32 {
	if x != nil {
		return x.NextTimestamp
	}
	return 0
}

func (x *LastPage) GetChapterType() int32 {
	if x != nil {
		return x.ChapterType
	}
	return 0
}

func (x *LastPage) GetAdvertisement() *AdNetworkList {
	if x != nil {
		return x.Advertisement
	}
	return nil
}

func (x *LastPage) GetMovieReward() *Popup {
	if x != nil {
		return x.MovieReward
	}
	return nil
}

// MangaPage
type MangaPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageUrl      string `protobuf:"bytes,1,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Width         uint32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height        uint32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Type          int32  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	EncryptionKey string `protobuf:"bytes,5,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty"`
}

func (x *MangaPage) Reset() {
	*x = MangaPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MangaPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MangaPage) ProtoMessage() {}

func (x *MangaPage) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MangaPage.ProtoReflect.Descriptor instead.
func (*MangaPage) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{8}
}

func (x *MangaPage) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *MangaPage) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MangaPage) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *MangaPage) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MangaPage) GetEncryptionKey() string {
	if x != nil {
		return x.EncryptionKey
	}
	return ""
}

// Page
type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MangaPage     *MangaPage     `protobuf:"bytes,1,opt,name=manga_page,json=mangaPage,proto3" json:"manga_page,omitempty"`
	BannerList    *BannerList    `protobuf:"bytes,2,opt,name=banner_list,json=bannerList,proto3" json:"banner_list,omitempty"`
	LastPage      *LastPage      `protobuf:"bytes,3,opt,name=last_page,json=lastPage,proto3" json:"last_page,omitempty"`
	Advertisement *AdNetworkList `protobuf:"bytes,4,opt,name=advertisement,proto3" json:"advertisement,omitempty"`
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{9}
}

func (x *Page) GetMangaPage() *MangaPage {
	if x != nil {
		return x.MangaPage
	}
	return nil
}

func (x *Page) GetBannerList() *BannerList {
	if x != nil {
		return x.BannerList
	}
	return nil
}

func (x *Page) GetLastPage() *LastPage {
	if x != nil {
		return x.LastPage
	}
	return nil
}

func (x *Page) GetAdvertisement() *AdNetworkList {
	if x != nil {
		return x.Advertisement
	}
	return nil
}

type Sns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body string `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Sns) Reset() {
	*x = Sns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sns) ProtoMessage() {}

func (x *Sns) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sns.ProtoReflect.Descriptor instead.
func (*Sns) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{10}
}

func (x *Sns) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Sns) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// MangaViewer
type MangaViewer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pages            []*Page    `protobuf:"bytes,1,rep,name=pages,proto3" json:"pages,omitempty"`
	ChapterId        uint32     `protobuf:"varint,2,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
	Chapters         []*Chapter `protobuf:"bytes,3,rep,name=chapters,proto3" json:"chapters,omitempty"`
	Sns              *Sns       `protobuf:"bytes,4,opt,name=sns,proto3" json:"sns,omitempty"`
	TitleName        string     `protobuf:"bytes,5,opt,name=title_name,json=titleName,proto3" json:"title_name,omitempty"`
	ChapterName      string     `protobuf:"bytes,6,opt,name=chapter_name,json=chapterName,proto3" json:"chapter_name,omitempty"`
	NumberOfComments uint32     `protobuf:"varint,7,opt,name=number_of_comments,json=numberOfComments,proto3" json:"number_of_comments,omitempty"`
	IsVerticalOnly   bool       `protobuf:"varint,8,opt,name=is_vertical_only,json=isVerticalOnly,proto3" json:"is_vertical_only,omitempty"`
	TitleId          uint32     `protobuf:"varint,9,opt,name=title_id,json=titleId,proto3" json:"title_id,omitempty"`
	StartFromRight   bool       `protobuf:"varint,10,opt,name=start_from_right,json=startFromRight,proto3" json:"start_from_right,omitempty"`
}

func (x *MangaViewer) Reset() {
	*x = MangaViewer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MangaViewer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MangaViewer) ProtoMessage() {}

func (x *MangaViewer) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MangaViewer.ProtoReflect.Descriptor instead.
func (*MangaViewer) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{11}
}

func (x *MangaViewer) GetPages() []*Page {
	if x != nil {
		return x.Pages
	}
	return nil
}

func (x *MangaViewer) GetChapterId() uint32 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *MangaViewer) GetChapters() []*Chapter {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *MangaViewer) GetSns() *Sns {
	if x != nil {
		return x.Sns
	}
	return nil
}

func (x *MangaViewer) GetTitleName() string {
	if x != nil {
		return x.TitleName
	}
	return ""
}

func (x *MangaViewer) GetChapterName() string {
	if x != nil {
		return x.ChapterName
	}
	return ""
}

func (x *MangaViewer) GetNumberOfComments() uint32 {
	if x != nil {
		return x.NumberOfComments
	}
	return 0
}

func (x *MangaViewer) GetIsVerticalOnly() bool {
	if x != nil {
		return x.IsVerticalOnly
	}
	return false
}

func (x *MangaViewer) GetTitleId() uint32 {
	if x != nil {
		return x.TitleId
	}
	return 0
}

func (x *MangaViewer) GetStartFromRight() bool {
	if x != nil {
		return x.StartFromRight
	}
	return false
}

type Title struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleId           uint32 `protobuf:"varint,1,opt,name=title_id,json=titleId,proto3" json:"title_id,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Author            string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	PortraitImageUrl  string `protobuf:"bytes,4,opt,name=portrait_image_url,json=portraitImageUrl,proto3" json:"portrait_image_url,omitempty"`
	LandscapeImageUrl string `protobuf:"bytes,5,opt,name=landscape_image_url,json=landscapeImageUrl,proto3" json:"landscape_image_url,omitempty"`
	ViewCount         uint32 `protobuf:"varint,6,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	Language          int32  `protobuf:"varint,7,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *Title) Reset() {
	*x = Title{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Title) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Title) ProtoMessage() {}

func (x *Title) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Title.ProtoReflect.Descriptor instead.
func (*Title) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{12}
}

func (x *Title) GetTitleId() uint32 {
	if x != nil {
		return x.TitleId
	}
	return 0
}

func (x *Title) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Title) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Title) GetPortraitImageUrl() string {
	if x != nil {
		return x.PortraitImageUrl
	}
	return ""
}

func (x *Title) GetLandscapeImageUrl() string {
	if x != nil {
		return x.LandscapeImageUrl
	}
	return ""
}

func (x *Title) GetViewCount() uint32 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *Title) GetLanguage() int32 {
	if x != nil {
		return x.Language
	}
	return 0
}

type TitleDetailView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                    *Title     `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	TitleImageUrl            string     `protobuf:"bytes,2,opt,name=title_image_url,json=titleImageUrl,proto3" json:"title_image_url,omitempty"`
	Overview                 string     `protobuf:"bytes,3,opt,name=overview,proto3" json:"overview,omitempty"`
	BackgroundImageUrl       string     `protobuf:"bytes,4,opt,name=background_image_url,json=backgroundImageUrl,proto3" json:"background_image_url,omitempty"`
	NextTimestamp            uint32     `protobuf:"varint,5,opt,name=next_timestamp,json=nextTimestamp,proto3" json:"next_timestamp,omitempty"`
	UpdateTiming             int32      `protobuf:"varint,6,opt,name=update_timing,json=updateTiming,proto3" json:"update_timing,omitempty"`
	ViewingPeriodDescription string     `protobuf:"bytes,7,opt,name=viewing_period_description,json=viewingPeriodDescription,proto3" json:"viewing_period_description,omitempty"`
	NonAppearanceInfo        string     `protobuf:"bytes,8,opt,name=non_appearance_info,json=nonAppearanceInfo,proto3" json:"non_appearance_info,omitempty"`
	FirstChapterList         []*Chapter `protobuf:"bytes,9,rep,name=first_chapter_list,json=firstChapterList,proto3" json:"first_chapter_list,omitempty"`
	LastChapterList          []*Chapter `protobuf:"bytes,10,rep,name=last_chapter_list,json=lastChapterList,proto3" json:"last_chapter_list,omitempty"`
	Banners                  []*Banner  `protobuf:"bytes,11,rep,name=banners,proto3" json:"banners,omitempty"`
	RecommendedTitleList     []*Title   `protobuf:"bytes,12,rep,name=recommended_title_list,json=recommendedTitleList,proto3" json:"recommended_title_list,omitempty"`
	Sns                      *Sns       `protobuf:"bytes,13,opt,name=sns,proto3" json:"sns,omitempty"`
	IsSimulReleased          bool       `protobuf:"varint,14,opt,name=is_simul_released,json=isSimulReleased,proto3" json:"is_simul_released,omitempty"`
	IsSubscribed             bool       `protobuf:"varint,15,opt,name=is_subscribed,json=isSubscribed,proto3" json:"is_subscribed,omitempty"`
	Rating                   int32      `protobuf:"varint,16,opt,name=rating,proto3" json:"rating,omitempty"`
	ChaptersDescending       bool       `protobuf:"varint,17,opt,name=chapters_descending,json=chaptersDescending,proto3" json:"chapters_descending,omitempty"`
	NumberOfViews            uint32     `protobuf:"varint,18,opt,name=number_of_views,json=numberOfViews,proto3" json:"number_of_views,omitempty"`
}

func (x *TitleDetailView) Reset() {
	*x = TitleDetailView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TitleDetailView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleDetailView) ProtoMessage() {}

func (x *TitleDetailView) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleDetailView.ProtoReflect.Descriptor instead.
func (*TitleDetailView) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{13}
}

func (x *TitleDetailView) GetTitle() *Title {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *TitleDetailView) GetTitleImageUrl() string {
	if x != nil {
		return x.TitleImageUrl
	}
	return ""
}

func (x *TitleDetailView) GetOverview() string {
	if x != nil {
		return x.Overview
	}
	return ""
}

func (x *TitleDetailView) GetBackgroundImageUrl() string {
	if x != nil {
		return x.BackgroundImageUrl
	}
	return ""
}

func (x *TitleDetailView) GetNextTimestamp() uint32 {
	if x != nil {
		return x.NextTimestamp
	}
	return 0
}

func (x *TitleDetailView) GetUpdateTiming() int32 {
	if x != nil {
		return x.UpdateTiming
	}
	return 0
}

func (x *TitleDetailView) GetViewingPeriodDescription() string {
	if x != nil {
		return x.ViewingPeriodDescription
	}
	return ""
}

func (x *TitleDetailView) GetNonAppearanceInfo() string {
	if x != nil {
		return x.NonAppearanceInfo
	}
	return ""
}

func (x *TitleDetailView) GetFirstChapterList() []*Chapter {
	if x != nil {
		return x.FirstChapterList
	}
	return nil
}

func (x *TitleDetailView) GetLastChapterList() []*Chapter {
	if x != nil {
		return x.LastChapterList
	}
	return nil
}

func (x *TitleDetailView) GetBanners() []*Banner {
	if x != nil {
		return x.Banners
	}
	return nil
}

func (x *TitleDetailView) GetRecommendedTitleList() []*Title {
	if x != nil {
		return x.RecommendedTitleList
	}
	return nil
}

func (x *TitleDetailView) GetSns() *Sns {
	if x != nil {
		return x.Sns
	}
	return nil
}

func (x *TitleDetailView) GetIsSimulReleased() bool {
	if x != nil {
		return x.IsSimulReleased
	}
	return false
}

func (x *TitleDetailView) GetIsSubscribed() bool {
	if x != nil {
		return x.IsSubscribed
	}
	return false
}

func (x *TitleDetailView) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *TitleDetailView) GetChaptersDescending() bool {
	if x != nil {
		return x.ChaptersDescending
	}
	return false
}

func (x *TitleDetailView) GetNumberOfViews() uint32 {
	if x != nil {
		return x.NumberOfViews
	}
	return 0
}

type AllTitlesGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheTitle string   `protobuf:"bytes,1,opt,name=theTitle,proto3" json:"theTitle,omitempty"`
	Titles   []*Title `protobuf:"bytes,2,rep,name=titles,proto3" json:"titles,omitempty"`
}

func (x *AllTitlesGroup) Reset() {
	*x = AllTitlesGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTitlesGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTitlesGroup) ProtoMessage() {}

func (x *AllTitlesGroup) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTitlesGroup.ProtoReflect.Descriptor instead.
func (*AllTitlesGroup) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{14}
}

func (x *AllTitlesGroup) GetTheTitle() string {
	if x != nil {
		return x.TheTitle
	}
	return ""
}

func (x *AllTitlesGroup) GetTitles() []*Title {
	if x != nil {
		return x.Titles
	}
	return nil
}

type AllTitlesViewV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllTitlesGroup []*AllTitlesGroup `protobuf:"bytes,1,rep,name=AllTitlesGroup,proto3" json:"AllTitlesGroup,omitempty"`
}

func (x *AllTitlesViewV2) Reset() {
	*x = AllTitlesViewV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTitlesViewV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTitlesViewV2) ProtoMessage() {}

func (x *AllTitlesViewV2) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTitlesViewV2.ProtoReflect.Descriptor instead.
func (*AllTitlesViewV2) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{15}
}

func (x *AllTitlesViewV2) GetAllTitlesGroup() []*AllTitlesGroup {
	if x != nil {
		return x.AllTitlesGroup
	}
	return nil
}

// SuccessResult
type SuccessResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFeaturedUpdated bool             `protobuf:"varint,1,opt,name=is_featured_updated,json=isFeaturedUpdated,proto3" json:"is_featured_updated,omitempty"`
	AllTitlesViewV2   *AllTitlesViewV2 `protobuf:"bytes,25,opt,name=allTitlesViewV2,proto3" json:"allTitlesViewV2,omitempty"`
	TitleDetailView   *TitleDetailView `protobuf:"bytes,8,opt,name=title_detail_view,json=titleDetailView,proto3" json:"title_detail_view,omitempty"`
	MangaViewer       *MangaViewer     `protobuf:"bytes,10,opt,name=manga_viewer,json=mangaViewer,proto3" json:"manga_viewer,omitempty"`
}

func (x *SuccessResult) Reset() {
	*x = SuccessResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuccessResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessResult) ProtoMessage() {}

func (x *SuccessResult) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessResult.ProtoReflect.Descriptor instead.
func (*SuccessResult) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{16}
}

func (x *SuccessResult) GetIsFeaturedUpdated() bool {
	if x != nil {
		return x.IsFeaturedUpdated
	}
	return false
}

func (x *SuccessResult) GetAllTitlesViewV2() *AllTitlesViewV2 {
	if x != nil {
		return x.AllTitlesViewV2
	}
	return nil
}

func (x *SuccessResult) GetTitleDetailView() *TitleDetailView {
	if x != nil {
		return x.TitleDetailView
	}
	return nil
}

func (x *SuccessResult) GetMangaViewer() *MangaViewer {
	if x != nil {
		return x.MangaViewer
	}
	return nil
}

// Response
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *SuccessResult `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{17}
}

func (x *Response) GetSuccess() *SuccessResult {
	if x != nil {
		return x.Success
	}
	return nil
}

type AdNetworkList_AdNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facebook *AdNetworkList_AdNetwork_Facebook `protobuf:"bytes,1,opt,name=facebook,proto3" json:"facebook,omitempty"`
	Admob    *AdNetworkList_AdNetwork_Admob    `protobuf:"bytes,2,opt,name=admob,proto3" json:"admob,omitempty"`
	Mopub    *AdNetworkList_AdNetwork_Mopub    `protobuf:"bytes,3,opt,name=mopub,proto3" json:"mopub,omitempty"`
	Adsense  *AdNetworkList_AdNetwork_Adsense  `protobuf:"bytes,4,opt,name=adsense,proto3" json:"adsense,omitempty"`
	Applovin *AdNetworkList_AdNetwork_Applovin `protobuf:"bytes,5,opt,name=applovin,proto3" json:"applovin,omitempty"`
}

func (x *AdNetworkList_AdNetwork) Reset() {
	*x = AdNetworkList_AdNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdNetworkList_AdNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdNetworkList_AdNetwork) ProtoMessage() {}

func (x *AdNetworkList_AdNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdNetworkList_AdNetwork.ProtoReflect.Descriptor instead.
func (*AdNetworkList_AdNetwork) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{5, 0}
}

func (x *AdNetworkList_AdNetwork) GetFacebook() *AdNetworkList_AdNetwork_Facebook {
	if x != nil {
		return x.Facebook
	}
	return nil
}

func (x *AdNetworkList_AdNetwork) GetAdmob() *AdNetworkList_AdNetwork_Admob {
	if x != nil {
		return x.Admob
	}
	return nil
}

func (x *AdNetworkList_AdNetwork) GetMopub() *AdNetworkList_AdNetwork_Mopub {
	if x != nil {
		return x.Mopub
	}
	return nil
}

func (x *AdNetworkList_AdNetwork) GetAdsense() *AdNetworkList_AdNetwork_Adsense {
	if x != nil {
		return x.Adsense
	}
	return nil
}

func (x *AdNetworkList_AdNetwork) GetApplovin() *AdNetworkList_AdNetwork_Applovin {
	if x != nil {
		return x.Applovin
	}
	return nil
}

type AdNetworkList_AdNetwork_Facebook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlacementId string `protobuf:"bytes,1,opt,name=placement_id,json=placementId,proto3" json:"placement_id,omitempty"`
}

func (x *AdNetworkList_AdNetwork_Facebook) Reset() {
	*x = AdNetworkList_AdNetwork_Facebook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdNetworkList_AdNetwork_Facebook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdNetworkList_AdNetwork_Facebook) ProtoMessage() {}

func (x *AdNetworkList_AdNetwork_Facebook) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdNetworkList_AdNetwork_Facebook.ProtoReflect.Descriptor instead.
func (*AdNetworkList_AdNetwork_Facebook) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{5, 0, 0}
}

func (x *AdNetworkList_AdNetwork_Facebook) GetPlacementId() string {
	if x != nil {
		return x.PlacementId
	}
	return ""
}

type AdNetworkList_AdNetwork_Admob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitId string `protobuf:"bytes,1,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
}

func (x *AdNetworkList_AdNetwork_Admob) Reset() {
	*x = AdNetworkList_AdNetwork_Admob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdNetworkList_AdNetwork_Admob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdNetworkList_AdNetwork_Admob) ProtoMessage() {}

func (x *AdNetworkList_AdNetwork_Admob) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdNetworkList_AdNetwork_Admob.ProtoReflect.Descriptor instead.
func (*AdNetworkList_AdNetwork_Admob) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{5, 0, 1}
}

func (x *AdNetworkList_AdNetwork_Admob) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

type AdNetworkList_AdNetwork_Mopub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitId string `protobuf:"bytes,1,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
}

func (x *AdNetworkList_AdNetwork_Mopub) Reset() {
	*x = AdNetworkList_AdNetwork_Mopub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdNetworkList_AdNetwork_Mopub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdNetworkList_AdNetwork_Mopub) ProtoMessage() {}

func (x *AdNetworkList_AdNetwork_Mopub) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdNetworkList_AdNetwork_Mopub.ProtoReflect.Descriptor instead.
func (*AdNetworkList_AdNetwork_Mopub) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{5, 0, 2}
}

func (x *AdNetworkList_AdNetwork_Mopub) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

type AdNetworkList_AdNetwork_Adsense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitId string `protobuf:"bytes,1,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
}

func (x *AdNetworkList_AdNetwork_Adsense) Reset() {
	*x = AdNetworkList_AdNetwork_Adsense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdNetworkList_AdNetwork_Adsense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdNetworkList_AdNetwork_Adsense) ProtoMessage() {}

func (x *AdNetworkList_AdNetwork_Adsense) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdNetworkList_AdNetwork_Adsense.ProtoReflect.Descriptor instead.
func (*AdNetworkList_AdNetwork_Adsense) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{5, 0, 3}
}

func (x *AdNetworkList_AdNetwork_Adsense) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

type AdNetworkList_AdNetwork_Applovin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitId string `protobuf:"bytes,1,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
}

func (x *AdNetworkList_AdNetwork_Applovin) Reset() {
	*x = AdNetworkList_AdNetwork_Applovin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdNetworkList_AdNetwork_Applovin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdNetworkList_AdNetwork_Applovin) ProtoMessage() {}

func (x *AdNetworkList_AdNetwork_Applovin) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdNetworkList_AdNetwork_Applovin.ProtoReflect.Descriptor instead.
func (*AdNetworkList_AdNetwork_Applovin) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{5, 0, 4}
}

func (x *AdNetworkList_AdNetwork_Applovin) GetUnitId() string {
	if x != nil {
		return x.UnitId
	}
	return ""
}

type Popup_Button struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text   string            `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Action *TransitionAction `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *Popup_Button) Reset() {
	*x = Popup_Button{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Popup_Button) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Popup_Button) ProtoMessage() {}

func (x *Popup_Button) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Popup_Button.ProtoReflect.Descriptor instead.
func (*Popup_Button) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Popup_Button) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Popup_Button) GetAction() *TransitionAction {
	if x != nil {
		return x.Action
	}
	return nil
}

type Popup_OSDefault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject       string        `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Body          string        `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	OkButton      *Popup_Button `protobuf:"bytes,3,opt,name=ok_button,json=okButton,proto3" json:"ok_button,omitempty"`
	NeutralButton *Popup_Button `protobuf:"bytes,4,opt,name=neutral_button,json=neutralButton,proto3" json:"neutral_button,omitempty"`
	CancelButton  *Popup_Button `protobuf:"bytes,5,opt,name=cancel_button,json=cancelButton,proto3" json:"cancel_button,omitempty"`
}

func (x *Popup_OSDefault) Reset() {
	*x = Popup_OSDefault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Popup_OSDefault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Popup_OSDefault) ProtoMessage() {}

func (x *Popup_OSDefault) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Popup_OSDefault.ProtoReflect.Descriptor instead.
func (*Popup_OSDefault) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{6, 1}
}

func (x *Popup_OSDefault) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Popup_OSDefault) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Popup_OSDefault) GetOkButton() *Popup_Button {
	if x != nil {
		return x.OkButton
	}
	return nil
}

func (x *Popup_OSDefault) GetNeutralButton() *Popup_Button {
	if x != nil {
		return x.NeutralButton
	}
	return nil
}

func (x *Popup_OSDefault) GetCancelButton() *Popup_Button {
	if x != nil {
		return x.CancelButton
	}
	return nil
}

type Popup_AppDefault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject  string            `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Body     string            `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Action   *TransitionAction `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	ImageUrl string            `protobuf:"bytes,4,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
}

func (x *Popup_AppDefault) Reset() {
	*x = Popup_AppDefault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Popup_AppDefault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Popup_AppDefault) ProtoMessage() {}

func (x *Popup_AppDefault) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Popup_AppDefault.ProtoReflect.Descriptor instead.
func (*Popup_AppDefault) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{6, 2}
}

func (x *Popup_AppDefault) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Popup_AppDefault) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Popup_AppDefault) GetAction() *TransitionAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Popup_AppDefault) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

type Popup_MovieReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageUrl      string         `protobuf:"bytes,1,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Advertisement *AdNetworkList `protobuf:"bytes,2,opt,name=advertisement,proto3" json:"advertisement,omitempty"`
}

func (x *Popup_MovieReward) Reset() {
	*x = Popup_MovieReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mangaplus_resp_web_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Popup_MovieReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Popup_MovieReward) ProtoMessage() {}

func (x *Popup_MovieReward) ProtoReflect() protoreflect.Message {
	mi := &file_mangaplus_resp_web_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Popup_MovieReward.ProtoReflect.Descriptor instead.
func (*Popup_MovieReward) Descriptor() ([]byte, []int) {
	return file_mangaplus_resp_web_proto_rawDescGZIP(), []int{6, 3}
}

func (x *Popup_MovieReward) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Popup_MovieReward) GetAdvertisement() *AdNetworkList {
	if x != nil {
		return x.Advertisement
	}
	return nil
}

var File_mangaplus_resp_web_proto protoreflect.FileDescriptor

var file_mangaplus_resp_web_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x77, 0x65, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6d, 0x61, 0x6e, 0x67,
	0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x22, 0x73,
	0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x3c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x3c, 0x0a, 0x10, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xb8, 0x02, 0x0a, 0x07, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4f,
	0x6e, 0x6c, 0x79, 0x22, 0x86, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x6d, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4d, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x6c, 0x69, 0x6b,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xac, 0x05, 0x0a,
	0x0d, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c,
	0x0a, 0x0b, 0x61, 0x64, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x0a, 0x61, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x1a, 0xcc, 0x04, 0x0a,
	0x09, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x50, 0x0a, 0x08, 0x66, 0x61,
	0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d,
	0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65,
	0x62, 0x2e, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x2e,
	0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x47, 0x0a, 0x05,
	0x61, 0x64, 0x6d, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x61,
	0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62,
	0x2e, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x41,
	0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x41, 0x64, 0x6d, 0x6f, 0x62, 0x52, 0x05,
	0x61, 0x64, 0x6d, 0x6f, 0x62, 0x12, 0x47, 0x0a, 0x05, 0x6d, 0x6f, 0x70, 0x75, 0x62, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x4d, 0x6f, 0x70, 0x75, 0x62, 0x52, 0x05, 0x6d, 0x6f, 0x70, 0x75, 0x62, 0x12, 0x4d,
	0x0a, 0x07, 0x61, 0x64, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x77, 0x65, 0x62, 0x2e, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x2e, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x41, 0x64, 0x73,
	0x65, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x61, 0x64, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x08, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x76, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x77, 0x65, 0x62, 0x2e, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x2e, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x6f, 0x76, 0x69, 0x6e, 0x52, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x6f, 0x76, 0x69, 0x6e, 0x1a,
	0x2d, 0x0a, 0x08, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x20,
	0x0a, 0x05, 0x41, 0x64, 0x6d, 0x6f, 0x62, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64,
	0x1a, 0x20, 0x0a, 0x05, 0x4d, 0x6f, 0x70, 0x75, 0x62, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74,
	0x49, 0x64, 0x1a, 0x22, 0x0a, 0x07, 0x41, 0x64, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x1a, 0x23, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x6c, 0x6f, 0x76,
	0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x22, 0xd0, 0x06, 0x0a, 0x05,
	0x50, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x42, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x6e, 0x67,
	0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x50,
	0x6f, 0x70, 0x75, 0x70, 0x2e, 0x4f, 0x53, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x09,
	0x6f, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f,
	0x77, 0x65, 0x62, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x48, 0x0a, 0x0c, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c,
	0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x50, 0x6f, 0x70, 0x75,
	0x70, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x1a, 0x5a, 0x0a, 0x06, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61,
	0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x88, 0x02, 0x0a, 0x09, 0x4f, 0x53, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x6f, 0x6b, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x70,
	0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x08, 0x6f, 0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x12, 0x47, 0x0a, 0x0e, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x6e, 0x67,
	0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x50,
	0x6f, 0x70, 0x75, 0x70, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x65, 0x75,
	0x74, 0x72, 0x61, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0d, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x2e, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x1a, 0x95, 0x01, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x3c,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f,
	0x77, 0x65, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x1a, 0x73, 0x0a, 0x0b, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x47, 0x0a, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d,
	0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65,
	0x62, 0x2e, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xc6,
	0x03, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x12, 0x3e, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70,
	0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70,
	0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x47, 0x0a, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70,
	0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x41, 0x64, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x77, 0x65, 0x62, 0x2e, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x52, 0x0b, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x6e, 0x67,
	0x61, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x89, 0x02, 0x0a, 0x04,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61,
	0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x4d, 0x61,
	0x6e, 0x67, 0x61, 0x50, 0x61, 0x67, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70,
	0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c,
	0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x4c, 0x61, 0x73, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x47,
	0x0a, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x41, 0x64, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x03, 0x53, 0x6e, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0x9f, 0x03, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x56, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x52, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x03,
	0x73, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x6e, 0x67,
	0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x53,
	0x6e, 0x73, 0x52, 0x03, 0x73, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61,
	0x70, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x22, 0xfa, 0x06, 0x0a, 0x0f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x1a, 0x76, 0x69, 0x65, 0x77, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x76, 0x69, 0x65,
	0x77, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x70,
	0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6e, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x10,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x47, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61,
	0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62,
	0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x6e,
	0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x4f, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x5f, 0x77, 0x65, 0x62, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x14, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x03, 0x73, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77,
	0x65, 0x62, 0x2e, 0x53, 0x6e, 0x73, 0x52, 0x03, 0x73, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69,
	0x73, 0x5f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x44, 0x65, 0x73, 0x63, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x56, 0x69, 0x65, 0x77, 0x73, 0x22, 0x5f, 0x0a,
	0x0e, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x68, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x68, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61,
	0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62,
	0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x06, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x22, 0x5d,
	0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x56,
	0x32, 0x12, 0x4a, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x67,
	0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x41,
	0x6c, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x41,
	0x6c, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xa3, 0x02,
	0x0a, 0x0d, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x4d, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77,
	0x56, 0x32, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61,
	0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x41, 0x6c,
	0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x56, 0x32, 0x52, 0x0f, 0x61,
	0x6c, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x56, 0x32, 0x12, 0x4f,
	0x0a, 0x11, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x6e, 0x67,
	0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x52, 0x0f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x42, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x4d, 0x61, 0x6e, 0x67, 0x61,
	0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x56, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x22, 0x47, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x5f, 0x77, 0x65, 0x62, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x27, 0x5a, 0x25,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c,
	0x75, 0x73, 0x2f, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x5f, 0x77, 0x65, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mangaplus_resp_web_proto_rawDescOnce sync.Once
	file_mangaplus_resp_web_proto_rawDescData = file_mangaplus_resp_web_proto_rawDesc
)

func file_mangaplus_resp_web_proto_rawDescGZIP() []byte {
	file_mangaplus_resp_web_proto_rawDescOnce.Do(func() {
		file_mangaplus_resp_web_proto_rawDescData = protoimpl.X.CompressGZIP(file_mangaplus_resp_web_proto_rawDescData)
	})
	return file_mangaplus_resp_web_proto_rawDescData
}

var file_mangaplus_resp_web_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_mangaplus_resp_web_proto_goTypes = []interface{}{
	(*Banner)(nil),                           // 0: mangaplus_resp_web.Banner
	(*BannerList)(nil),                       // 1: mangaplus_resp_web.BannerList
	(*TransitionAction)(nil),                 // 2: mangaplus_resp_web.TransitionAction
	(*Chapter)(nil),                          // 3: mangaplus_resp_web.Chapter
	(*Comment)(nil),                          // 4: mangaplus_resp_web.Comment
	(*AdNetworkList)(nil),                    // 5: mangaplus_resp_web.AdNetworkList
	(*Popup)(nil),                            // 6: mangaplus_resp_web.Popup
	(*LastPage)(nil),                         // 7: mangaplus_resp_web.LastPage
	(*MangaPage)(nil),                        // 8: mangaplus_resp_web.MangaPage
	(*Page)(nil),                             // 9: mangaplus_resp_web.Page
	(*Sns)(nil),                              // 10: mangaplus_resp_web.Sns
	(*MangaViewer)(nil),                      // 11: mangaplus_resp_web.MangaViewer
	(*Title)(nil),                            // 12: mangaplus_resp_web.Title
	(*TitleDetailView)(nil),                  // 13: mangaplus_resp_web.TitleDetailView
	(*AllTitlesGroup)(nil),                   // 14: mangaplus_resp_web.AllTitlesGroup
	(*AllTitlesViewV2)(nil),                  // 15: mangaplus_resp_web.AllTitlesViewV2
	(*SuccessResult)(nil),                    // 16: mangaplus_resp_web.SuccessResult
	(*Response)(nil),                         // 17: mangaplus_resp_web.Response
	(*AdNetworkList_AdNetwork)(nil),          // 18: mangaplus_resp_web.AdNetworkList.AdNetwork
	(*AdNetworkList_AdNetwork_Facebook)(nil), // 19: mangaplus_resp_web.AdNetworkList.AdNetwork.Facebook
	(*AdNetworkList_AdNetwork_Admob)(nil),    // 20: mangaplus_resp_web.AdNetworkList.AdNetwork.Admob
	(*AdNetworkList_AdNetwork_Mopub)(nil),    // 21: mangaplus_resp_web.AdNetworkList.AdNetwork.Mopub
	(*AdNetworkList_AdNetwork_Adsense)(nil),  // 22: mangaplus_resp_web.AdNetworkList.AdNetwork.Adsense
	(*AdNetworkList_AdNetwork_Applovin)(nil), // 23: mangaplus_resp_web.AdNetworkList.AdNetwork.Applovin
	(*Popup_Button)(nil),                     // 24: mangaplus_resp_web.Popup.Button
	(*Popup_OSDefault)(nil),                  // 25: mangaplus_resp_web.Popup.OSDefault
	(*Popup_AppDefault)(nil),                 // 26: mangaplus_resp_web.Popup.AppDefault
	(*Popup_MovieReward)(nil),                // 27: mangaplus_resp_web.Popup.MovieReward
}
var file_mangaplus_resp_web_proto_depIdxs = []int32{
	2,  // 0: mangaplus_resp_web.Banner.action:type_name -> mangaplus_resp_web.TransitionAction
	0,  // 1: mangaplus_resp_web.BannerList.banners:type_name -> mangaplus_resp_web.Banner
	18, // 2: mangaplus_resp_web.AdNetworkList.ad_networks:type_name -> mangaplus_resp_web.AdNetworkList.AdNetwork
	25, // 3: mangaplus_resp_web.Popup.os_default:type_name -> mangaplus_resp_web.Popup.OSDefault
	26, // 4: mangaplus_resp_web.Popup.app_default:type_name -> mangaplus_resp_web.Popup.AppDefault
	27, // 5: mangaplus_resp_web.Popup.movie_reward:type_name -> mangaplus_resp_web.Popup.MovieReward
	3,  // 6: mangaplus_resp_web.LastPage.current_chapter:type_name -> mangaplus_resp_web.Chapter
	3,  // 7: mangaplus_resp_web.LastPage.next_chapter:type_name -> mangaplus_resp_web.Chapter
	4,  // 8: mangaplus_resp_web.LastPage.top_comments:type_name -> mangaplus_resp_web.Comment
	5,  // 9: mangaplus_resp_web.LastPage.advertisement:type_name -> mangaplus_resp_web.AdNetworkList
	6,  // 10: mangaplus_resp_web.LastPage.movie_reward:type_name -> mangaplus_resp_web.Popup
	8,  // 11: mangaplus_resp_web.Page.manga_page:type_name -> mangaplus_resp_web.MangaPage
	1,  // 12: mangaplus_resp_web.Page.banner_list:type_name -> mangaplus_resp_web.BannerList
	7,  // 13: mangaplus_resp_web.Page.last_page:type_name -> mangaplus_resp_web.LastPage
	5,  // 14: mangaplus_resp_web.Page.advertisement:type_name -> mangaplus_resp_web.AdNetworkList
	9,  // 15: mangaplus_resp_web.MangaViewer.pages:type_name -> mangaplus_resp_web.Page
	3,  // 16: mangaplus_resp_web.MangaViewer.chapters:type_name -> mangaplus_resp_web.Chapter
	10, // 17: mangaplus_resp_web.MangaViewer.sns:type_name -> mangaplus_resp_web.Sns
	12, // 18: mangaplus_resp_web.TitleDetailView.title:type_name -> mangaplus_resp_web.Title
	3,  // 19: mangaplus_resp_web.TitleDetailView.first_chapter_list:type_name -> mangaplus_resp_web.Chapter
	3,  // 20: mangaplus_resp_web.TitleDetailView.last_chapter_list:type_name -> mangaplus_resp_web.Chapter
	0,  // 21: mangaplus_resp_web.TitleDetailView.banners:type_name -> mangaplus_resp_web.Banner
	12, // 22: mangaplus_resp_web.TitleDetailView.recommended_title_list:type_name -> mangaplus_resp_web.Title
	10, // 23: mangaplus_resp_web.TitleDetailView.sns:type_name -> mangaplus_resp_web.Sns
	12, // 24: mangaplus_resp_web.AllTitlesGroup.titles:type_name -> mangaplus_resp_web.Title
	14, // 25: mangaplus_resp_web.AllTitlesViewV2.AllTitlesGroup:type_name -> mangaplus_resp_web.AllTitlesGroup
	15, // 26: mangaplus_resp_web.SuccessResult.allTitlesViewV2:type_name -> mangaplus_resp_web.AllTitlesViewV2
	13, // 27: mangaplus_resp_web.SuccessResult.title_detail_view:type_name -> mangaplus_resp_web.TitleDetailView
	11, // 28: mangaplus_resp_web.SuccessResult.manga_viewer:type_name -> mangaplus_resp_web.MangaViewer
	16, // 29: mangaplus_resp_web.Response.success:type_name -> mangaplus_resp_web.SuccessResult
	19, // 30: mangaplus_resp_web.AdNetworkList.AdNetwork.facebook:type_name -> mangaplus_resp_web.AdNetworkList.AdNetwork.Facebook
	20, // 31: mangaplus_resp_web.AdNetworkList.AdNetwork.admob:type_name -> mangaplus_resp_web.AdNetworkList.AdNetwork.Admob
	21, // 32: mangaplus_resp_web.AdNetworkList.AdNetwork.mopub:type_name -> mangaplus_resp_web.AdNetworkList.AdNetwork.Mopub
	22, // 33: mangaplus_resp_web.AdNetworkList.AdNetwork.adsense:type_name -> mangaplus_resp_web.AdNetworkList.AdNetwork.Adsense
	23, // 34: mangaplus_resp_web.AdNetworkList.AdNetwork.applovin:type_name -> mangaplus_resp_web.AdNetworkList.AdNetwork.Applovin
	2,  // 35: mangaplus_resp_web.Popup.Button.action:type_name -> mangaplus_resp_web.TransitionAction
	24, // 36: mangaplus_resp_web.Popup.OSDefault.ok_button:type_name -> mangaplus_resp_web.Popup.Button
	24, // 37: mangaplus_resp_web.Popup.OSDefault.neutral_button:type_name -> mangaplus_resp_web.Popup.Button
	24, // 38: mangaplus_resp_web.Popup.OSDefault.cancel_button:type_name -> mangaplus_resp_web.Popup.Button
	2,  // 39: mangaplus_resp_web.Popup.AppDefault.action:type_name -> mangaplus_resp_web.TransitionAction
	5,  // 40: mangaplus_resp_web.Popup.MovieReward.advertisement:type_name -> mangaplus_resp_web.AdNetworkList
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_mangaplus_resp_web_proto_init() }
func file_mangaplus_resp_web_proto_init() {
	if File_mangaplus_resp_web_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mangaplus_resp_web_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Banner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransitionAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdNetworkList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Popup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MangaPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MangaViewer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Title); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TitleDetailView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTitlesGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTitlesViewV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuccessResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdNetworkList_AdNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdNetworkList_AdNetwork_Facebook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdNetworkList_AdNetwork_Admob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdNetworkList_AdNetwork_Mopub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdNetworkList_AdNetwork_Adsense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdNetworkList_AdNetwork_Applovin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Popup_Button); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Popup_OSDefault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Popup_AppDefault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mangaplus_resp_web_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Popup_MovieReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mangaplus_resp_web_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mangaplus_resp_web_proto_goTypes,
		DependencyIndexes: file_mangaplus_resp_web_proto_depIdxs,
		MessageInfos:      file_mangaplus_resp_web_proto_msgTypes,
	}.Build()
	File_mangaplus_resp_web_proto = out.File
	file_mangaplus_resp_web_proto_rawDesc = nil
	file_mangaplus_resp_web_proto_goTypes = nil
	file_mangaplus_resp_web_proto_depIdxs = nil
}
